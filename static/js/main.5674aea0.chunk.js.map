{"version":3,"sources":["components/search-bar/search-bar.jsx","components/card/card.jsx","components/card-list/card-list.jsx","pages/home-page/home-page.jsx","pages/profile-page/profile-page.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","placeholder","handleChange","className","type","onChange","withRouter","monster","width","height","history","match","onClick","push","path","id","alt","src","name","email","CardList","props","monsters","map","key","HomePage","useState","setMonsters","searchField","setSearchField","useEffect","fetch","then","response","json","users","filteredMonsters","filter","m","toLowerCase","includes","e","target","value","ProfilePage","userProfile","setUserProfile","params","monsterId","userDetail","address","website","console","log","url","substring","lastIndexOf","Fragment","street","city","zipcode","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5674aea0.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./search-bar-styles.css\";\n\nconst SearchBar = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport \"./card-styles.css\";\n\nconst Card = ({ monster, width, height, history, match }) => {\n  return (\n    <div\n      className=\"card-container\"\n      onClick={() => history.push(`${match.path}/${monster.id}`)}\n    >\n      <img\n        alt=\"Avatar\"\n        src={`https://robohash.org/${monster.id}?set=set2&size=${width}x${height}`}\n      />\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n    </div>\n  );\n};\n\nexport default withRouter(Card);\n","import React from \"react\";\nimport Card from \"../card/card\";\n\nimport \"./card-list-styles.css\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} width=\"180\" height=\"180\" />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React, { useState, useEffect } from \"react\";\n\nimport SearchBar from \"../../components/search-bar/search-bar\";\nimport CardList from \"../../components/card-list/card-list\";\n\nconst HomePage = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n\n  const API_USER_LIST = \"https://jsonplaceholder.typicode.com/users\";\n\n  useEffect(() => {\n    fetch(API_USER_LIST)\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []);\n\n  const handleSearchChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  const filteredMonsters = monsters.filter((m) =>\n    m.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBar\n        placeholder=\"Search Monsters\"\n        handleChange={handleSearchChange}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"../../components/card/card\";\n\nimport \"./profile-page-styles.css\";\n\nconst ProfilePage = ({ history, match }) => {\n  const [userProfile, setUserProfile] = useState({});\n\n  const API_USER_DETAIL = \"https://jsonplaceholder.typicode.com/users/\";\n\n  useEffect(() => {\n    fetch(`${API_USER_DETAIL}${match.params.monsterId}`)\n      .then((response) => response.json())\n      .then((userDetail) => setUserProfile(userDetail));\n  }, []);\n\n  const handleBackNavigation = () => {\n    console.log(match);\n    history.push(`${match.url}`.substring(0, match.url.lastIndexOf(\"/\")));\n  };\n\n  const { id, name, email, address, website } = userProfile;\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-header-section\">\n        <button className=\"nav-button\" onClick={handleBackNavigation}>\n          &#10094; Back\n        </button>\n\n        {userProfile ? <h1 className=\"profile-title\">{name}</h1> : null}\n      </div>\n      <div className=\"profile-details\">\n        <div className=\"profile-pic-container\">\n          <img\n            className=\"profile-pic\"\n            alt=\"Avatar\"\n            src={`https://robohash.org/${id}?set=set2&bgset=bg1&size=300x300`}\n          />\n        </div>\n\n        <div className=\"profile-data-container\">\n          {!userProfile.address ? (\n            <div className=\"loading-text\">Loading...</div>\n          ) : (\n            <React.Fragment>\n              <div className=\"profile-data\">Name: {name}</div>\n              <div className=\"profile-data\">Email: {email}</div>\n              <div className=\"profile-data\">Website: {website}</div>\n              <div className=\"profile-data\">\n                Address:\n                {` ${address.street}, ${address.city} ${address.zipcode}`}\n              </div>\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProfilePage;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport HomePage from \"./pages/home-page/home-page\";\nimport ProfilePage from \"./pages/profile-page/profile-page\";\n\nimport CardList from \"./components/card-list/card-list\";\nimport SearchBar from \"./components/search-bar/search-bar\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const ROOT_PATH = \"/monsters-rolodex\";\n\n  return (\n    <div>\n      <Route exact path={ROOT_PATH} component={HomePage} />\n      <Route path={`${ROOT_PATH}/:monsterId`} component={ProfilePage} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}